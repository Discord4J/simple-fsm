plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'net.researchgate.release' version '2.6.0'
}

ext {
    isJitpack = "true" == System.getenv("JITPACK")
    isRelease = !version.toString().endsWith('-SNAPSHOT')
}

group 'com.discord4j'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
}

tasks.withType(Javadoc) {
    options {
        encoding = 'UTF-8'
        tags = ["apiNote:a:API Note:",
                "implSpec:a:Implementation Requirements:",
                "implNote:a:Implementation Note:"]
        addStringOption 'encoding', 'UTF-8'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

if (!isJitpack && isRelease) {
    signing {
        sign configurations.archives
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            customizePom(pom)

            from components.java

            artifact sourcesJar
            artifact javadocJar

            if (!isJitpack && isRelease) {
                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }

                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
    }

    if (!isJitpack) {
        repositories {
            maven {
                if (isRelease) {
                    url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                } else {
                    url 'https://oss.sonatype.org/content/repositories/snapshots/'
                }
                if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
                    credentials {
                        username project.property('sonatypeUsername')
                        password project.property('sonatypePassword')
                    }
                }
            }
        }
    }
}

if (!isJitpack && isRelease) {
    model {
        tasks.generatePomFileForMavenPublication {
            destination = file("$buildDir/generated-pom.xml")
        }
        tasks.publishMavenPublicationToMavenLocal {
            dependsOn project.tasks.signArchives
        }
        tasks.publishMavenPublicationToMavenRepository {
            dependsOn project.tasks.signArchives
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'A very simple finite state machine'
            name 'simple-fsm'
            url 'https://github.com/Discord4J/simple-fsm'
            organization {
                name 'Discord4J'
                url 'https://discord4j.com'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/Discord4J/simple-fsm/issues'
            }
            licenses {
                license {
                    name 'MIT'
                    url 'https://github.com/Discord4J/simple-fsm/LICENSE.txt'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/Discord4J/simple-fsm'
                connection 'scm:git:git://github.com/Discord4J/simple-fsm.git'
                developerConnection 'scm:git:ssh://git@github.com:Discord4J/simple-fsm.git'
            }
            developers {
                developer {
                    name 'The Discord4J Team'
                }
            }
        }
    }
}

release {
    preTagCommitMessage = 'Release version'
    tagCommitMessage = 'Release version'
    newVersionCommitMessage = 'Next development version'
}

afterReleaseBuild.dependsOn publish

wrapper {
    gradleVersion = "5.2.1"
    distributionType = Wrapper.DistributionType.ALL
}
